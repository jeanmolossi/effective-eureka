definitions:
  auth.LoginCredentials:
    properties:
      password:
        example: "123456789"
        maxLength: 255
        minLength: 6
        type: string
      username:
        example: jean@email.com
        type: string
    required:
    - password
    - username
    type: object
  handler.HttpCourseByIDBadRequestErr:
    properties:
      error:
        example: Missing course_id param
        type: string
    type: object
  handler.HttpCourseCreated:
    properties:
      course_id:
        example: 05d4d9d3-01a3-4fd3-8d3e-e3178522f514
        type: string
      course_published:
        example: false
        type: boolean
    type: object
  handler.HttpCourseNotFoundErr:
    properties:
      error:
        example: Course Not Found
        type: string
    type: object
  handler.HttpCourseOk:
    properties:
      course_description:
        example: Effective Eureka is a course about Go.
        type: string
      course_id:
        example: 05d4d9d3-01a3-4fd3-8d3e-e3178522f514
        type: string
      course_published:
        example: false
        type: boolean
      course_thumbnail:
        example: https://effective-eureka.s3.amazonaws.com/courses/effective-eureka/thumbnail.png
        type: string
      course_title:
        example: Effective Eureka
        type: string
    type: object
  handler.HttpCreateCourseBadRequestErr:
    properties:
      error:
        example: Bad Request
        type: string
      errors:
        items:
          $ref: '#/definitions/shared.FieldError'
        type: array
    type: object
  handler.HttpCreateStudentBadRequestErr:
    properties:
      error:
        example: Bad Request
        type: string
      errors:
        items:
          $ref: '#/definitions/shared.FieldError'
        type: array
    type: object
  handler.HttpEditCourseInfoBadRequestErr:
    properties:
      error:
        example: Bad Request
        type: string
      errors:
        items:
          $ref: '#/definitions/shared.FieldError'
        type: array
    type: object
  handler.HttpStudentInternalServerErr:
    properties:
      error:
        example: Internal Server Error
        type: string
    type: object
  handler.HttpStudentRegistered:
    properties:
      student_email:
        example: john@doe.com
        type: string
      student_id:
        example: 05d4d9d3-01a3-4fd3-8d3e-e3178522f514
        type: string
    type: object
  httputil.HttpInternalServerErr:
    properties:
      error:
        example: internal server error
        type: string
    type: object
  httputil.PingInternalServerErr:
    properties:
      message:
        example: unexpected error
        type: string
    type: object
  httputil.PingOk:
    properties:
      message:
        example: pong
        type: string
    type: object
  input.CreateCourse:
    properties:
      description:
        example: This is a catalog video manager API.
        maxLength: 255
        type: string
      published:
        example: true
        type: boolean
      thumbnail:
        example: https://effective-eureka.s3.amazonaws.com/courses/thumbnail/1.jpg
        type: string
      title:
        example: Effective Eureka
        maxLength: 255
        type: string
    required:
    - title
    type: object
  input.EditCourseInfo:
    properties:
      description:
        example: Effective Eureka is a course about effective eureka.
        maxLength: 255
        type: string
      thumbnail:
        example: https://example.com/thumbnail.png
        type: string
      title:
        example: Effective Eureka
        maxLength: 255
        type: string
    type: object
  input.StudentInfo:
    properties:
      password:
        example: "123456789"
        maxLength: 64
        minLength: 8
        type: string
      username:
        example: john@doe.com
        type: string
    required:
    - password
    - username
    type: object
  shared.FieldError:
    properties:
      field:
        example: field_name
        type: string
      message:
        example: field_name is required
        type: string
    type: object
info:
  contact: {}
  termsOfService: github.com/jeanmolossi/effective-eureka/terms/
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/auth.LoginCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Login
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - access_token: []
      summary: Logout
      tags:
      - auth
  /course:
    post:
      consumes:
      - application/json
      description: Create a course
      parameters:
      - description: Course object which will be created
        in: body
        name: course
        required: true
        schema:
          $ref: '#/definitions/input.CreateCourse'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.HttpCourseCreated'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.HttpCreateCourseBadRequestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpInternalServerErr'
      security:
      - access_token: []
      summary: Course creation
      tags:
      - courses
  /course/:courseID:
    get:
      consumes:
      - application/json
      description: Get a course by ID
      parameters:
      - description: Course ID
        in: path
        name: courseID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.HttpCourseOk'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.HttpCourseByIDBadRequestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.HttpCourseNotFoundErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpInternalServerErr'
      security:
      - access_token: []
      summary: Course retrieval
      tags:
      - courses
    put:
      consumes:
      - application/json
      description: Edit a course basic information
      parameters:
      - description: Course ID
        in: path
        name: courseID
        required: true
        type: string
      - description: Course object which will be edited
        in: body
        name: course
        required: true
        schema:
          $ref: '#/definitions/input.EditCourseInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.HttpCourseOk'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.HttpEditCourseInfoBadRequestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.HttpCourseNotFoundErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpInternalServerErr'
      security:
      - access_token: []
      summary: Course edition
      tags:
      - courses
  /ping:
    get:
      consumes:
      - application/json
      description: A simple health check.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.PingOk'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.PingInternalServerErr'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/httputil.PingInternalServerErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/httputil.PingInternalServerErr'
      summary: Ping the server.
      tags:
      - healthcheck
  /students/me:
    get:
      consumes:
      - application/json
      description: Get auth student.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.HttpStudentRegistered'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.HttpCreateStudentBadRequestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.HttpStudentInternalServerErr'
      security:
      - access_token: []
      summary: Get auth student.
      tags:
      - students
  /students/register:
    post:
      consumes:
      - application/json
      description: Register a new student.
      parameters:
      - description: Student information
        in: body
        name: student
        required: true
        schema:
          $ref: '#/definitions/input.StudentInfo'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.HttpStudentRegistered'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.HttpCreateStudentBadRequestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.HttpStudentInternalServerErr'
      summary: Register a new student.
      tags:
      - students
securityDefinitions:
  access_token:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
