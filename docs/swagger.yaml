definitions:
  auth.LoginCredentials:
    properties:
      password:
        example: "123456789"
        maxLength: 255
        minLength: 6
        type: string
      username:
        example: jean@email.com
        type: string
    required:
    - password
    - username
    type: object
  handler.HttpBadRequestErr:
    properties:
      error:
        example: Bad Request
        type: string
      errors:
        items:
          $ref: '#/definitions/shared.FieldError'
        type: array
    type: object
  handler.HttpBuyer:
    properties:
      email:
        example: olga.dev@email.com
        type: string
      name:
        example: Olga Doutel Frade
        type: string
    type: object
  handler.HttpCourseByIDBadRequestErr:
    properties:
      error:
        example: Missing course_id param
        type: string
    type: object
  handler.HttpCourseCreated:
    properties:
      course_id:
        example: 05d4d9d3-01a3-4fd3-8d3e-e3178522f514
        type: string
      course_published:
        example: false
        type: boolean
    type: object
  handler.HttpCourseNotFoundErr:
    properties:
      error:
        example: Course Not Found
        type: string
    type: object
  handler.HttpCourseOk:
    properties:
      course_description:
        example: Effective Eureka is a course about Go.
        type: string
      course_id:
        example: 05d4d9d3-01a3-4fd3-8d3e-e3178522f514
        type: string
      course_published:
        example: false
        type: boolean
      course_thumbnail:
        example: https://effective-eureka.s3.amazonaws.com/courses/effective-eureka/thumbnail.png
        type: string
      course_title:
        example: Effective Eureka
        type: string
    type: object
  handler.HttpCoursesWithMeta:
    properties:
      data:
        items:
          $ref: '#/definitions/handler.HttpCourseOk'
        type: array
      meta:
        $ref: '#/definitions/shared.HttpMeta'
    type: object
  handler.HttpCreateCourseBadRequestErr:
    properties:
      error:
        example: Bad Request
        type: string
      errors:
        items:
          $ref: '#/definitions/shared.FieldError'
        type: array
    type: object
  handler.HttpCreateStudentBadRequestErr:
    properties:
      error:
        example: Bad Request
        type: string
      errors:
        items:
          $ref: '#/definitions/shared.FieldError'
        type: array
    type: object
  handler.HttpEditCourseInfoBadRequestErr:
    properties:
      error:
        example: Bad Request
        type: string
      errors:
        items:
          $ref: '#/definitions/shared.FieldError'
        type: array
    type: object
  handler.HttpLessonCreated:
    properties:
      lesson_description:
        example: Effective Eureka is a lesson about Go.
        type: string
      lesson_id:
        example: 05d4d9d3-01a3-4fd3-8d3e-e3178522f514
        type: string
      lesson_published:
        example: false
        type: boolean
      lesson_thumbnail:
        example: https://effective-eureka.s3.amazonaws.com/courses/effective-eureka/thumbnail.png
        type: string
      lesson_title:
        example: Effective Eureka
        type: string
    type: object
  handler.HttpLessonOk:
    properties:
      lesson_description:
        example: Effective Eureka is a lesson about Go.
        type: string
      lesson_id:
        example: 05d4d9d3-01a3-4fd3-8d3e-e3178522f514
        type: string
      lesson_published:
        example: false
        type: boolean
      lesson_thumbnail:
        example: https://effective-eureka.s3.amazonaws.com/courses/effective-eureka/thumbnail.png
        type: string
      lesson_title:
        example: Effective Eureka
        type: string
    type: object
  handler.HttpModuleCreated:
    properties:
      course_id:
        example: 05d4d9d3-01a3-4fd3-8d3e-e3178522f515
        type: string
      module_description:
        example: Effective Eureka is a course about Go.
        type: string
      module_id:
        example: 4aa77560-9c90-4128-b308-ad5c0515b5d7
        type: string
      module_published:
        example: false
        type: boolean
      module_thumbnail:
        example: https://effective-eureka.s3.amazonaws.com/courses/effective-eureka/thumbnail.png
        type: string
      module_title:
        example: Effective Eureka
        type: string
    type: object
  handler.HttpModuleOk:
    properties:
      course_id:
        example: 05d4d9d3-01a3-4fd3-8d3e-e3178522f515
        type: string
      module_description:
        example: Effective Eureka is a course about Go.
        type: string
      module_id:
        example: 4aa77560-9c90-4128-b308-ad5c0515b5d7
        type: string
      module_published:
        example: false
        type: boolean
      module_thumbnail:
        example: https://effective-eureka.s3.amazonaws.com/courses/effective-eureka/thumbnail.png
        type: string
      module_title:
        example: Effective Eureka
        type: string
    type: object
  handler.HttpProduct:
    properties:
      id:
        example: 1564852
        type: integer
      name:
        example: Product02
        type: string
    type: object
  handler.HttpPurchase:
    properties:
      status:
        example: COMPLETE
        type: string
      transaction:
        example: HP17715690036011
        type: string
      warranty_expire_date:
        example: 1625022000000
        type: integer
    type: object
  handler.HttpPurchasesItem:
    properties:
      buyer:
        $ref: '#/definitions/handler.HttpBuyer'
      product:
        $ref: '#/definitions/handler.HttpProduct'
      purchase:
        $ref: '#/definitions/handler.HttpPurchase'
    type: object
  handler.HttpPurchasesOk:
    properties:
      items:
        items:
          $ref: '#/definitions/handler.HttpPurchasesItem'
        type: array
    type: object
  handler.HttpSectionCreated:
    properties:
      course_id:
        example: 05d4d9d3-01a3-4fd3-8d3e-e3178522f515
        type: string
      module_id:
        example: 4aa77560-9c90-4128-b308-ad5c0515b5d7
        type: string
      section_id:
        example: 4aa77560-9c90-4128-b308-ad5c0515b5d7
        type: string
      section_index:
        example: 1
        type: integer
      section_published:
        example: false
        type: boolean
      section_title:
        example: Effective Eureka
        type: string
    type: object
  handler.HttpSectionOk:
    properties:
      course_id:
        example: 05d4d9d3-01a3-4fd3-8d3e-e3178522f515
        type: string
      module_id:
        example: 4aa77560-9c90-4128-b308-ad5c0515b5d7
        type: string
      section_id:
        example: 4aa77560-9c90-4128-b308-ad5c0515b5d7
        type: string
      section_index:
        example: 1
        type: integer
      section_published:
        example: false
        type: boolean
      section_title:
        example: Effective Eureka
        type: string
    type: object
  handler.HttpStudentForbiddenErr:
    properties:
      error:
        example: Missing authentication
        type: string
    type: object
  handler.HttpStudentInternalServerErr:
    properties:
      error:
        example: Internal Server Error
        type: string
    type: object
  handler.HttpStudentRegistered:
    properties:
      student_email:
        example: john@doe.com
        type: string
      student_id:
        example: 05d4d9d3-01a3-4fd3-8d3e-e3178522f514
        type: string
    type: object
  httputil.HttpBadRequestErr:
    properties:
      error:
        example: bad request
        type: string
    type: object
  httputil.HttpInternalServerErr:
    properties:
      error:
        example: internal server error
        type: string
    type: object
  httputil.HttpMissingAuthenticationErr:
    properties:
      error:
        example: missing authentication
        type: string
    type: object
  httputil.HttpNotFoundErr:
    properties:
      error:
        example: not found
        type: string
    type: object
  httputil.PingInternalServerErr:
    properties:
      message:
        example: unexpected error
        type: string
    type: object
  httputil.PingOk:
    properties:
      message:
        example: pong
        type: string
    type: object
  input.CreateCourse:
    properties:
      description:
        example: This is a catalog video manager API.
        maxLength: 255
        type: string
      published:
        example: true
        type: boolean
      thumbnail:
        example: https://effective-eureka.s3.amazonaws.com/courses/thumbnail/1.jpg
        type: string
      title:
        example: Effective Eureka
        maxLength: 255
        type: string
    required:
    - title
    type: object
  input.CreateLesson:
    properties:
      description:
        example: Lesson 1 description
        maxLength: 255
        type: string
      index:
        example: 1
        type: integer
      published:
        example: true
        type: boolean
      thumbnail:
        example: https://example.com/thumbnail.png
        type: string
      title:
        example: Lesson 1
        maxLength: 255
        type: string
    required:
    - title
    type: object
  input.CreateModule:
    properties:
      description:
        example: This is a catalog video manager API.
        maxLength: 255
        type: string
      published:
        example: true
        type: boolean
      thumbnail:
        example: https://effective-eureka.s3.amazonaws.com/courses/thumbnail/1.jpg
        type: string
      title:
        example: Effective Eureka
        maxLength: 255
        type: string
    required:
    - title
    type: object
  input.CreateSection:
    properties:
      index:
        example: 1
        type: integer
      published:
        example: true
        type: boolean
      title:
        example: Effective Eureka
        maxLength: 255
        type: string
    required:
    - index
    - title
    type: object
  input.EditCourseInfo:
    properties:
      description:
        example: Effective Eureka is a course about effective eureka.
        maxLength: 255
        type: string
      thumbnail:
        example: https://example.com/thumbnail.png
        type: string
      title:
        example: Effective Eureka
        maxLength: 255
        type: string
    type: object
  input.EditLessonInfo:
    properties:
      description:
        example: Lesson 1 description
        maxLength: 255
        type: string
      index:
        example: 1
        type: integer
      published:
        example: true
        type: boolean
      section_id:
        example: affec47d-e496-48ed-a6d8-78a57177a752
        type: string
      thumbnail:
        example: https://example.com/thumbnail.png
        type: string
      title:
        example: Lesson 1
        maxLength: 255
        type: string
    required:
    - title
    type: object
  input.EditModuleInfo:
    properties:
      course_id:
        example: f0f8e8c4-8b8f-4d8e-b8e7-8f9e939ca9e8
        type: string
      description:
        example: Effective Eureka is a course about effective eureka.
        maxLength: 255
        type: string
      published:
        example: true
        type: boolean
      thumbnail:
        example: https://example.com/thumbnail.png
        type: string
      title:
        example: Effective Eureka
        maxLength: 255
        type: string
    type: object
  input.EditSection:
    properties:
      index:
        example: 1
        type: integer
      module_id:
        example: 4aa77560-9c90-4128-b308-ad5c0515b5d7
        type: string
      published:
        example: true
        type: boolean
      title:
        example: Effective Eureka
        maxLength: 255
        type: string
    required:
    - title
    type: object
  input.StudentInfo:
    properties:
      password:
        example: "123456789"
        maxLength: 64
        minLength: 8
        type: string
      username:
        example: john@doe.com
        type: string
    required:
    - password
    - username
    type: object
  shared.FieldError:
    properties:
      field:
        example: field_name
        type: string
      message:
        example: field_name is required
        type: string
    type: object
  shared.HttpMeta:
    properties:
      items_per_page:
        example: 1
        type: integer
      next_page:
        example: http://localhost:8080/resource?page=3&items_per_page=1
        type: string
      page:
        example: 2
        type: integer
      prev_page:
        example: http://localhost:8080/resource?page=1&items_per_page=1
        type: string
    type: object
info:
  contact: {}
  termsOfService: github.com/jeanmolossi/effective-eureka/terms/
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/auth.LoginCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Login
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - access_token: []
      summary: Logout
      tags:
      - auth
  /course:
    get:
      consumes:
      - application/json
      description: Get a course list
      parameters:
      - description: List not published courses too
        in: query
        name: not_published
        type: boolean
      - description: Only get that fields
        in: query
        items:
          type: string
        name: fields
        type: array
      - description: Page
        in: query
        name: page
        type: integer
      - description: Only get that fields
        in: query
        name: items_per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.HttpCoursesWithMeta'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.HttpCourseByIDBadRequestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.HttpCourseNotFoundErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpInternalServerErr'
      security:
      - access_token: []
      summary: Course retrieval
      tags:
      - courses
    post:
      consumes:
      - application/json
      description: Create a course
      parameters:
      - description: Course object which will be created
        in: body
        name: course
        required: true
        schema:
          $ref: '#/definitions/input.CreateCourse'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.HttpCourseCreated'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.HttpCreateCourseBadRequestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpInternalServerErr'
      security:
      - access_token: []
      summary: Course creation
      tags:
      - courses
  /course/{courseID}:
    get:
      consumes:
      - application/json
      description: Get a course by ID
      parameters:
      - description: Course ID
        in: path
        name: courseID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.HttpCourseOk'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.HttpCourseByIDBadRequestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.HttpCourseNotFoundErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpInternalServerErr'
      security:
      - access_token: []
      summary: Course retrieval
      tags:
      - courses
    put:
      consumes:
      - application/json
      description: Edit a course basic information
      parameters:
      - description: Course ID
        in: path
        name: courseID
        required: true
        type: string
      - description: Course object which will be edited
        in: body
        name: course
        required: true
        schema:
          $ref: '#/definitions/input.EditCourseInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.HttpCourseOk'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.HttpEditCourseInfoBadRequestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.HttpCourseNotFoundErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpInternalServerErr'
      security:
      - access_token: []
      summary: Course edition
      tags:
      - courses
  /course/{courseID}/module:
    post:
      consumes:
      - application/json
      description: Create a module
      parameters:
      - description: Module object which will be created
        in: body
        name: module
        required: true
        schema:
          $ref: '#/definitions/input.CreateModule'
      - description: Course ID
        in: path
        name: courseID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.HttpModuleCreated'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpBadRequestErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HttpMissingAuthenticationErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpInternalServerErr'
      security:
      - access_token: []
      summary: Module creation
      tags:
      - courses
  /course/{courseID}/modules:
    get:
      consumes:
      - application/json
      description: Get all modules from a course
      parameters:
      - description: Course ID
        in: path
        name: courseID
        required: true
        type: string
      - description: List not published courses too
        in: query
        name: not_published
        type: boolean
      - description: Only get that fields
        in: query
        items:
          type: string
        name: fields
        type: array
      - description: Page
        in: query
        name: page
        type: integer
      - description: Only get that fields
        in: query
        name: items_per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handler.HttpModuleOk'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.HttpBadRequestErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HttpMissingAuthenticationErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HttpNotFoundErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpInternalServerErr'
      security:
      - access_token: []
      summary: Module retrieval
      tags:
      - modules
  /lesson/{lessonID}:
    put:
      consumes:
      - application/json
      description: Edit a lesson
      parameters:
      - description: Lesson
        in: body
        name: lesson
        required: true
        schema:
          $ref: '#/definitions/input.EditLessonInfo'
      - description: Lesson ID
        in: path
        name: lessonID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.HttpLessonOk'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpBadRequestErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HttpMissingAuthenticationErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HttpNotFoundErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpInternalServerErr'
      security:
      - access_token: []
      summary: Edit a lesson
      tags:
      - lessons
  /module/{moduleID}:
    get:
      consumes:
      - application/json
      description: Get a module
      parameters:
      - description: Module ID
        in: path
        name: moduleID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.HttpModuleOk'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.HttpBadRequestErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HttpMissingAuthenticationErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HttpNotFoundErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpInternalServerErr'
      security:
      - access_token: []
      summary: Module retrieval
      tags:
      - modules
    put:
      consumes:
      - application/json
      description: Edit a module
      parameters:
      - description: Module ID
        in: path
        name: moduleID
        required: true
        type: string
      - description: Module object which will be updated
        in: body
        name: module
        required: true
        schema:
          $ref: '#/definitions/input.EditModuleInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.HttpModuleOk'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.HttpBadRequestErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HttpMissingAuthenticationErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HttpNotFoundErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpInternalServerErr'
      security:
      - access_token: []
      summary: Module retrieval
      tags:
      - modules
  /module/{moduleID}/section:
    post:
      consumes:
      - application/json
      description: Create a section in module
      parameters:
      - description: Module ID
        in: path
        name: moduleID
        required: true
        type: string
      - description: Section data
        in: body
        name: section
        required: true
        schema:
          $ref: '#/definitions/input.CreateSection'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.HttpSectionCreated'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpBadRequestErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HttpMissingAuthenticationErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HttpNotFoundErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpInternalServerErr'
      security:
      - access_token: []
      summary: Create a section in module
      tags:
      - sections
  /module/{moduleID}/sections:
    get:
      consumes:
      - application/json
      description: Get sections from module
      parameters:
      - description: Module ID
        in: path
        name: moduleID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handler.HttpSectionOk'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpBadRequestErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HttpMissingAuthenticationErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HttpNotFoundErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpInternalServerErr'
      security:
      - access_token: []
      summary: Get sections from module
      tags:
      - sections
  /ping:
    get:
      consumes:
      - application/json
      description: A simple health check.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.PingOk'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.PingInternalServerErr'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/httputil.PingInternalServerErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/httputil.PingInternalServerErr'
      summary: Ping the server.
      tags:
      - healthcheck
  /purchases:
    get:
      consumes:
      - application/json
      description: Get sells
      parameters:
      - description: Transaction
        in: query
        name: transaction
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.HttpPurchasesOk'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - access_token: []
      summary: Get sells
      tags:
      - purchases
  /section/{sectionID}:
    put:
      consumes:
      - application/json
      description: Edit a section
      parameters:
      - description: Section ID
        in: path
        name: sectionID
        required: true
        type: string
      - description: Section data
        in: body
        name: section
        required: true
        schema:
          $ref: '#/definitions/input.EditSection'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.HttpSectionOk'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpBadRequestErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HttpMissingAuthenticationErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HttpNotFoundErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpInternalServerErr'
      security:
      - access_token: []
      summary: Edit a section
      tags:
      - sections
  /section/{sectionID}/lesson:
    post:
      consumes:
      - application/json
      description: Create a lesson
      parameters:
      - description: Lesson
        in: body
        name: lesson
        required: true
        schema:
          $ref: '#/definitions/input.CreateLesson'
      - description: Section ID
        in: path
        name: sectionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.HttpLessonCreated'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpBadRequestErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HttpMissingAuthenticationErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HttpNotFoundErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpInternalServerErr'
      security:
      - access_token: []
      summary: Create a lesson
      tags:
      - lessons
  /section/{sectionID}/lessons:
    get:
      consumes:
      - application/json
      description: Get lessons from section
      parameters:
      - description: Section ID
        in: path
        name: sectionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handler.HttpLessonOk'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpBadRequestErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HttpMissingAuthenticationErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HttpNotFoundErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpInternalServerErr'
      security:
      - access_token: []
      summary: Get lessons from section
      tags:
      - sections
  /students/me:
    get:
      consumes:
      - application/json
      description: Get auth student.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.HttpStudentRegistered'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.HttpCreateStudentBadRequestErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.HttpStudentForbiddenErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.HttpStudentInternalServerErr'
      security:
      - access_token: []
      summary: Get auth student.
      tags:
      - students
  /students/register:
    post:
      consumes:
      - application/json
      description: Register a new student.
      parameters:
      - description: Student information
        in: body
        name: student
        required: true
        schema:
          $ref: '#/definitions/input.StudentInfo'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.HttpStudentRegistered'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.HttpCreateStudentBadRequestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.HttpStudentInternalServerErr'
      summary: Register a new student.
      tags:
      - students
securityDefinitions:
  access_token:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
