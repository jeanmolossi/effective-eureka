// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/jeanmolossi/effective-eureka/src/core/modules/domain"
	mock "github.com/stretchr/testify/mock"
)

// ModuleRepository is an autogenerated mock type for the ModuleRepository type
type ModuleRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: module
func (_m *ModuleRepository) Create(module domain.Module) (domain.Module, error) {
	ret := _m.Called(module)

	var r0 domain.Module
	if rf, ok := ret.Get(0).(func(domain.Module) domain.Module); ok {
		r0 = rf(module)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Module)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Module) error); ok {
		r1 = rf(module)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Edit provides a mock function with given fields: moduleID, updater
func (_m *ModuleRepository) Edit(moduleID string, updater domain.ModuleUpdater) (domain.Module, error) {
	ret := _m.Called(moduleID, updater)

	var r0 domain.Module
	if rf, ok := ret.Get(0).(func(string, domain.ModuleUpdater) domain.Module); ok {
		r0 = rf(moduleID, updater)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Module)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, domain.ModuleUpdater) error); ok {
		r1 = rf(moduleID, updater)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCourseID provides a mock function with given fields: courseID
func (_m *ModuleRepository) GetByCourseID(courseID string) ([]domain.Module, error) {
	ret := _m.Called(courseID)

	var r0 []domain.Module
	if rf, ok := ret.Get(0).(func(string) []domain.Module); ok {
		r0 = rf(courseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Module)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(courseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: moduleID
func (_m *ModuleRepository) GetByID(moduleID string) (domain.Module, error) {
	ret := _m.Called(moduleID)

	var r0 domain.Module
	if rf, ok := ret.Get(0).(func(string) domain.Module); ok {
		r0 = rf(moduleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Module)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(moduleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IssetCourseID provides a mock function with given fields: courseID
func (_m *ModuleRepository) IssetCourseID(courseID string) bool {
	ret := _m.Called(courseID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(courseID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
