// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/jeanmolossi/effective-eureka/src/core/sections/domain"
	factory "github.com/jeanmolossi/effective-eureka/src/core/sections/factory"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Section is an autogenerated mock type for the Section type
type Section struct {
	mock.Mock
}

// Build provides a mock function with given fields:
func (_m *Section) Build() domain.Section {
	ret := _m.Called()

	var r0 domain.Section
	if rf, ok := ret.Get(0).(func() domain.Section); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Section)
		}
	}

	return r0
}

// CreateSection provides a mock function with given fields: moduleID, title, index, published, createdAt, updatedAt
func (_m *Section) CreateSection(moduleID string, title string, index uint16, published bool, createdAt *time.Time, updatedAt *time.Time) factory.Section {
	ret := _m.Called(moduleID, title, index, published, createdAt, updatedAt)

	var r0 factory.Section
	if rf, ok := ret.Get(0).(func(string, string, uint16, bool, *time.Time, *time.Time) factory.Section); ok {
		r0 = rf(moduleID, title, index, published, createdAt, updatedAt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(factory.Section)
		}
	}

	return r0
}

// WithCourseID provides a mock function with given fields: courseID
func (_m *Section) WithCourseID(courseID string) factory.Section {
	ret := _m.Called(courseID)

	var r0 factory.Section
	if rf, ok := ret.Get(0).(func(string) factory.Section); ok {
		r0 = rf(courseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(factory.Section)
		}
	}

	return r0
}

// WithID provides a mock function with given fields: sectionID
func (_m *Section) WithID(sectionID string) factory.Section {
	ret := _m.Called(sectionID)

	var r0 factory.Section
	if rf, ok := ret.Get(0).(func(string) factory.Section); ok {
		r0 = rf(sectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(factory.Section)
		}
	}

	return r0
}
