// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/jeanmolossi/effective-eureka/src/core/sections/domain"
	mock "github.com/stretchr/testify/mock"
)

// SectionsRepository is an autogenerated mock type for the SectionsRepository type
type SectionsRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: section
func (_m *SectionsRepository) Create(section domain.Section) (domain.Section, error) {
	ret := _m.Called(section)

	var r0 domain.Section
	if rf, ok := ret.Get(0).(func(domain.Section) domain.Section); ok {
		r0 = rf(section)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Section)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Section) error); ok {
		r1 = rf(section)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Edit provides a mock function with given fields: section, updater
func (_m *SectionsRepository) Edit(section domain.Section, updater domain.SectionUpdater) (domain.Section, error) {
	ret := _m.Called(section, updater)

	var r0 domain.Section
	if rf, ok := ret.Get(0).(func(domain.Section, domain.SectionUpdater) domain.Section); ok {
		r0 = rf(section, updater)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Section)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Section, domain.SectionUpdater) error); ok {
		r1 = rf(section, updater)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: sectionID
func (_m *SectionsRepository) GetByID(sectionID string) (domain.Section, error) {
	ret := _m.Called(sectionID)

	var r0 domain.Section
	if rf, ok := ret.Get(0).(func(string) domain.Section); ok {
		r0 = rf(sectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Section)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sectionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByModuleID provides a mock function with given fields: moduleID
func (_m *SectionsRepository) GetByModuleID(moduleID string) ([]domain.Section, error) {
	ret := _m.Called(moduleID)

	var r0 []domain.Section
	if rf, ok := ret.Get(0).(func(string) []domain.Section); ok {
		r0 = rf(moduleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Section)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(moduleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLessons provides a mock function with given fields: sectionID
func (_m *SectionsRepository) GetLessons(sectionID string) ([]interface{}, error) {
	ret := _m.Called(sectionID)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(string) []interface{}); ok {
		r0 = rf(sectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sectionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IssetModule provides a mock function with given fields: moduleID
func (_m *SectionsRepository) IssetModule(moduleID string) (string, bool) {
	ret := _m.Called(moduleID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(moduleID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(moduleID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}
